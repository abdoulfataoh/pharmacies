# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SearchPharmaciesBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, lat: float=None, long: float=None, assurance: List[str]=None):  # noqa: E501
        """SearchPharmaciesBody - a model defined in Swagger

        :param lat: The lat of this SearchPharmaciesBody.  # noqa: E501
        :type lat: float
        :param long: The long of this SearchPharmaciesBody.  # noqa: E501
        :type long: float
        :param assurance: The assurance of this SearchPharmaciesBody.  # noqa: E501
        :type assurance: List[str]
        """
        self.swagger_types = {
            'lat': float,
            'long': float,
            'assurance': List[str]
        }

        self.attribute_map = {
            'lat': 'lat',
            'long': 'long',
            'assurance': 'assurance'
        }
        self._lat = lat
        self._long = long
        self._assurance = assurance

    @classmethod
    def from_dict(cls, dikt) -> 'SearchPharmaciesBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The search_pharmacies_body of this SearchPharmaciesBody.  # noqa: E501
        :rtype: SearchPharmaciesBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self) -> float:
        """Gets the lat of this SearchPharmaciesBody.


        :return: The lat of this SearchPharmaciesBody.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this SearchPharmaciesBody.


        :param lat: The lat of this SearchPharmaciesBody.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def long(self) -> float:
        """Gets the long of this SearchPharmaciesBody.


        :return: The long of this SearchPharmaciesBody.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long: float):
        """Sets the long of this SearchPharmaciesBody.


        :param long: The long of this SearchPharmaciesBody.
        :type long: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")  # noqa: E501

        self._long = long

    @property
    def assurance(self) -> List[str]:
        """Gets the assurance of this SearchPharmaciesBody.


        :return: The assurance of this SearchPharmaciesBody.
        :rtype: List[str]
        """
        return self._assurance

    @assurance.setter
    def assurance(self, assurance: List[str]):
        """Sets the assurance of this SearchPharmaciesBody.


        :param assurance: The assurance of this SearchPharmaciesBody.
        :type assurance: List[str]
        """

        self._assurance = assurance
