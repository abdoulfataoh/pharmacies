# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PharmacieAddBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nom_pharmacie: str=None, telephone: str=None, code_postale: str=None, addresse: str=None, assurance: List[str]=None, groupe: float=None, localisation: List[float]=None, products_ids: List[str]=None):  # noqa: E501
        """PharmacieAddBody - a model defined in Swagger

        :param nom_pharmacie: The nom_pharmacie of this PharmacieAddBody.  # noqa: E501
        :type nom_pharmacie: str
        :param telephone: The telephone of this PharmacieAddBody.  # noqa: E501
        :type telephone: str
        :param code_postale: The code_postale of this PharmacieAddBody.  # noqa: E501
        :type code_postale: str
        :param addresse: The addresse of this PharmacieAddBody.  # noqa: E501
        :type addresse: str
        :param assurance: The assurance of this PharmacieAddBody.  # noqa: E501
        :type assurance: List[str]
        :param groupe: The groupe of this PharmacieAddBody.  # noqa: E501
        :type groupe: float
        :param localisation: The localisation of this PharmacieAddBody.  # noqa: E501
        :type localisation: List[float]
        :param products_ids: The products_ids of this PharmacieAddBody.  # noqa: E501
        :type products_ids: List[str]
        """
        self.swagger_types = {
            'nom_pharmacie': str,
            'telephone': str,
            'code_postale': str,
            'addresse': str,
            'assurance': List[str],
            'groupe': float,
            'localisation': List[float],
            'products_ids': List[str]
        }

        self.attribute_map = {
            'nom_pharmacie': 'nom_pharmacie',
            'telephone': 'telephone',
            'code_postale': 'code_postale',
            'addresse': 'addresse',
            'assurance': 'assurance',
            'groupe': 'groupe',
            'localisation': 'localisation',
            'products_ids': 'products_ids'
        }
        self._nom_pharmacie = nom_pharmacie
        self._telephone = telephone
        self._code_postale = code_postale
        self._addresse = addresse
        self._assurance = assurance
        self._groupe = groupe
        self._localisation = localisation
        self._products_ids = products_ids

    @classmethod
    def from_dict(cls, dikt) -> 'PharmacieAddBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pharmacie_add_body of this PharmacieAddBody.  # noqa: E501
        :rtype: PharmacieAddBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nom_pharmacie(self) -> str:
        """Gets the nom_pharmacie of this PharmacieAddBody.


        :return: The nom_pharmacie of this PharmacieAddBody.
        :rtype: str
        """
        return self._nom_pharmacie

    @nom_pharmacie.setter
    def nom_pharmacie(self, nom_pharmacie: str):
        """Sets the nom_pharmacie of this PharmacieAddBody.


        :param nom_pharmacie: The nom_pharmacie of this PharmacieAddBody.
        :type nom_pharmacie: str
        """
        if nom_pharmacie is None:
            raise ValueError("Invalid value for `nom_pharmacie`, must not be `None`")  # noqa: E501

        self._nom_pharmacie = nom_pharmacie

    @property
    def telephone(self) -> str:
        """Gets the telephone of this PharmacieAddBody.


        :return: The telephone of this PharmacieAddBody.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """Sets the telephone of this PharmacieAddBody.


        :param telephone: The telephone of this PharmacieAddBody.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def code_postale(self) -> str:
        """Gets the code_postale of this PharmacieAddBody.


        :return: The code_postale of this PharmacieAddBody.
        :rtype: str
        """
        return self._code_postale

    @code_postale.setter
    def code_postale(self, code_postale: str):
        """Sets the code_postale of this PharmacieAddBody.


        :param code_postale: The code_postale of this PharmacieAddBody.
        :type code_postale: str
        """

        self._code_postale = code_postale

    @property
    def addresse(self) -> str:
        """Gets the addresse of this PharmacieAddBody.


        :return: The addresse of this PharmacieAddBody.
        :rtype: str
        """
        return self._addresse

    @addresse.setter
    def addresse(self, addresse: str):
        """Sets the addresse of this PharmacieAddBody.


        :param addresse: The addresse of this PharmacieAddBody.
        :type addresse: str
        """

        self._addresse = addresse

    @property
    def assurance(self) -> List[str]:
        """Gets the assurance of this PharmacieAddBody.


        :return: The assurance of this PharmacieAddBody.
        :rtype: List[str]
        """
        return self._assurance

    @assurance.setter
    def assurance(self, assurance: List[str]):
        """Sets the assurance of this PharmacieAddBody.


        :param assurance: The assurance of this PharmacieAddBody.
        :type assurance: List[str]
        """

        self._assurance = assurance

    @property
    def groupe(self) -> float:
        """Gets the groupe of this PharmacieAddBody.


        :return: The groupe of this PharmacieAddBody.
        :rtype: float
        """
        return self._groupe

    @groupe.setter
    def groupe(self, groupe: float):
        """Sets the groupe of this PharmacieAddBody.


        :param groupe: The groupe of this PharmacieAddBody.
        :type groupe: float
        """

        self._groupe = groupe

    @property
    def localisation(self) -> List[float]:
        """Gets the localisation of this PharmacieAddBody.


        :return: The localisation of this PharmacieAddBody.
        :rtype: List[float]
        """
        return self._localisation

    @localisation.setter
    def localisation(self, localisation: List[float]):
        """Sets the localisation of this PharmacieAddBody.


        :param localisation: The localisation of this PharmacieAddBody.
        :type localisation: List[float]
        """
        if localisation is None:
            raise ValueError("Invalid value for `localisation`, must not be `None`")  # noqa: E501

        self._localisation = localisation

    @property
    def products_ids(self) -> List[str]:
        """Gets the products_ids of this PharmacieAddBody.


        :return: The products_ids of this PharmacieAddBody.
        :rtype: List[str]
        """
        return self._products_ids

    @products_ids.setter
    def products_ids(self, products_ids: List[str]):
        """Sets the products_ids of this PharmacieAddBody.


        :param products_ids: The products_ids of this PharmacieAddBody.
        :type products_ids: List[str]
        """

        self._products_ids = products_ids
