# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PharmacieIdSetAvailableProductsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pharmacie_id: str=None, products_ids: List[str]=None):  # noqa: E501
        """PharmacieIdSetAvailableProductsBody - a model defined in Swagger

        :param pharmacie_id: The pharmacie_id of this PharmacieIdSetAvailableProductsBody.  # noqa: E501
        :type pharmacie_id: str
        :param products_ids: The products_ids of this PharmacieIdSetAvailableProductsBody.  # noqa: E501
        :type products_ids: List[str]
        """
        self.swagger_types = {
            'pharmacie_id': str,
            'products_ids': List[str]
        }

        self.attribute_map = {
            'pharmacie_id': 'pharmacie_id',
            'products_ids': 'products_ids'
        }
        self._pharmacie_id = pharmacie_id
        self._products_ids = products_ids

    @classmethod
    def from_dict(cls, dikt) -> 'PharmacieIdSetAvailableProductsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pharmacie_id_set_available_products_body of this PharmacieIdSetAvailableProductsBody.  # noqa: E501
        :rtype: PharmacieIdSetAvailableProductsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pharmacie_id(self) -> str:
        """Gets the pharmacie_id of this PharmacieIdSetAvailableProductsBody.


        :return: The pharmacie_id of this PharmacieIdSetAvailableProductsBody.
        :rtype: str
        """
        return self._pharmacie_id

    @pharmacie_id.setter
    def pharmacie_id(self, pharmacie_id: str):
        """Sets the pharmacie_id of this PharmacieIdSetAvailableProductsBody.


        :param pharmacie_id: The pharmacie_id of this PharmacieIdSetAvailableProductsBody.
        :type pharmacie_id: str
        """
        if pharmacie_id is None:
            raise ValueError("Invalid value for `pharmacie_id`, must not be `None`")  # noqa: E501

        self._pharmacie_id = pharmacie_id

    @property
    def products_ids(self) -> List[str]:
        """Gets the products_ids of this PharmacieIdSetAvailableProductsBody.


        :return: The products_ids of this PharmacieIdSetAvailableProductsBody.
        :rtype: List[str]
        """
        return self._products_ids

    @products_ids.setter
    def products_ids(self, products_ids: List[str]):
        """Sets the products_ids of this PharmacieIdSetAvailableProductsBody.


        :param products_ids: The products_ids of this PharmacieIdSetAvailableProductsBody.
        :type products_ids: List[str]
        """
        if products_ids is None:
            raise ValueError("Invalid value for `products_ids`, must not be `None`")  # noqa: E501

        self._products_ids = products_ids
