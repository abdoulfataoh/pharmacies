# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductsAddBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nom_commercial: str=None, dci: List[str]=None, dosage: str=None, forme_galemique: str=None, lab_fabricant: str=None, conditionnement: List[str]=None, prix_public: float=None):  # noqa: E501
        """ProductsAddBody - a model defined in Swagger

        :param nom_commercial: The nom_commercial of this ProductsAddBody.  # noqa: E501
        :type nom_commercial: str
        :param dci: The dci of this ProductsAddBody.  # noqa: E501
        :type dci: List[str]
        :param dosage: The dosage of this ProductsAddBody.  # noqa: E501
        :type dosage: str
        :param forme_galemique: The forme_galemique of this ProductsAddBody.  # noqa: E501
        :type forme_galemique: str
        :param lab_fabricant: The lab_fabricant of this ProductsAddBody.  # noqa: E501
        :type lab_fabricant: str
        :param conditionnement: The conditionnement of this ProductsAddBody.  # noqa: E501
        :type conditionnement: List[str]
        :param prix_public: The prix_public of this ProductsAddBody.  # noqa: E501
        :type prix_public: float
        """
        self.swagger_types = {
            'nom_commercial': str,
            'dci': List[str],
            'dosage': str,
            'forme_galemique': str,
            'lab_fabricant': str,
            'conditionnement': List[str],
            'prix_public': float
        }

        self.attribute_map = {
            'nom_commercial': 'nom_commercial',
            'dci': 'dci',
            'dosage': 'dosage',
            'forme_galemique': 'forme_galemique',
            'lab_fabricant': 'lab_fabricant',
            'conditionnement': 'conditionnement',
            'prix_public': 'prix_public'
        }
        self._nom_commercial = nom_commercial
        self._dci = dci
        self._dosage = dosage
        self._forme_galemique = forme_galemique
        self._lab_fabricant = lab_fabricant
        self._conditionnement = conditionnement
        self._prix_public = prix_public

    @classmethod
    def from_dict(cls, dikt) -> 'ProductsAddBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The products_add_body of this ProductsAddBody.  # noqa: E501
        :rtype: ProductsAddBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nom_commercial(self) -> str:
        """Gets the nom_commercial of this ProductsAddBody.


        :return: The nom_commercial of this ProductsAddBody.
        :rtype: str
        """
        return self._nom_commercial

    @nom_commercial.setter
    def nom_commercial(self, nom_commercial: str):
        """Sets the nom_commercial of this ProductsAddBody.


        :param nom_commercial: The nom_commercial of this ProductsAddBody.
        :type nom_commercial: str
        """
        if nom_commercial is None:
            raise ValueError("Invalid value for `nom_commercial`, must not be `None`")  # noqa: E501

        self._nom_commercial = nom_commercial

    @property
    def dci(self) -> List[str]:
        """Gets the dci of this ProductsAddBody.


        :return: The dci of this ProductsAddBody.
        :rtype: List[str]
        """
        return self._dci

    @dci.setter
    def dci(self, dci: List[str]):
        """Sets the dci of this ProductsAddBody.


        :param dci: The dci of this ProductsAddBody.
        :type dci: List[str]
        """
        if dci is None:
            raise ValueError("Invalid value for `dci`, must not be `None`")  # noqa: E501

        self._dci = dci

    @property
    def dosage(self) -> str:
        """Gets the dosage of this ProductsAddBody.


        :return: The dosage of this ProductsAddBody.
        :rtype: str
        """
        return self._dosage

    @dosage.setter
    def dosage(self, dosage: str):
        """Sets the dosage of this ProductsAddBody.


        :param dosage: The dosage of this ProductsAddBody.
        :type dosage: str
        """
        if dosage is None:
            raise ValueError("Invalid value for `dosage`, must not be `None`")  # noqa: E501

        self._dosage = dosage

    @property
    def forme_galemique(self) -> str:
        """Gets the forme_galemique of this ProductsAddBody.


        :return: The forme_galemique of this ProductsAddBody.
        :rtype: str
        """
        return self._forme_galemique

    @forme_galemique.setter
    def forme_galemique(self, forme_galemique: str):
        """Sets the forme_galemique of this ProductsAddBody.


        :param forme_galemique: The forme_galemique of this ProductsAddBody.
        :type forme_galemique: str
        """
        if forme_galemique is None:
            raise ValueError("Invalid value for `forme_galemique`, must not be `None`")  # noqa: E501

        self._forme_galemique = forme_galemique

    @property
    def lab_fabricant(self) -> str:
        """Gets the lab_fabricant of this ProductsAddBody.


        :return: The lab_fabricant of this ProductsAddBody.
        :rtype: str
        """
        return self._lab_fabricant

    @lab_fabricant.setter
    def lab_fabricant(self, lab_fabricant: str):
        """Sets the lab_fabricant of this ProductsAddBody.


        :param lab_fabricant: The lab_fabricant of this ProductsAddBody.
        :type lab_fabricant: str
        """
        if lab_fabricant is None:
            raise ValueError("Invalid value for `lab_fabricant`, must not be `None`")  # noqa: E501

        self._lab_fabricant = lab_fabricant

    @property
    def conditionnement(self) -> List[str]:
        """Gets the conditionnement of this ProductsAddBody.


        :return: The conditionnement of this ProductsAddBody.
        :rtype: List[str]
        """
        return self._conditionnement

    @conditionnement.setter
    def conditionnement(self, conditionnement: List[str]):
        """Sets the conditionnement of this ProductsAddBody.


        :param conditionnement: The conditionnement of this ProductsAddBody.
        :type conditionnement: List[str]
        """
        if conditionnement is None:
            raise ValueError("Invalid value for `conditionnement`, must not be `None`")  # noqa: E501

        self._conditionnement = conditionnement

    @property
    def prix_public(self) -> float:
        """Gets the prix_public of this ProductsAddBody.


        :return: The prix_public of this ProductsAddBody.
        :rtype: float
        """
        return self._prix_public

    @prix_public.setter
    def prix_public(self, prix_public: float):
        """Sets the prix_public of this ProductsAddBody.


        :param prix_public: The prix_public of this ProductsAddBody.
        :type prix_public: float
        """
        if prix_public is None:
            raise ValueError("Invalid value for `prix_public`, must not be `None`")  # noqa: E501

        self._prix_public = prix_public
